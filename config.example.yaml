# Whisper Voice Keyboard Configuration (Refactored)
# Place this file at ~/.whisper.yaml to customize settings

audio:
  # Sample rate for audio capture (Hz)
  sample_rate: 16000
  
  # Audio buffer size (samples per chunk)
  # Silero VAD requires at least 512 samples, WebRTC uses first 480
  buffer_size: 512
  
  # Microphone device index (null for auto-detect)
  # Find device IDs: python -c "import sounddevice; print(sounddevice.query_devices())"
  mic_device: null
  
  # Minimum duration of speech to transcribe (seconds)
  min_utterance_duration: 1.1
  
  # Silence duration before finalizing transcription (seconds)
  # Lower = faster completion, but may cut off speech
  post_speech_silence_duration: 0.6
  
  # Buffer duration before speech detection (seconds)
  # Captures audio before VAD detects speech onset
  pre_recording_buffer_duration: 1.0

transcription:
  # Main model for final accurate transcription
  # Options: tiny, tiny.en, base, base.en, small, small.en, medium, medium.en, large-v2, large-v3
  # Larger models are more accurate but slower
  model: "large-v3"
  
  # Realtime preview model (fast, lower accuracy)
  # Use tiny/tiny.en for instant feedback
  realtime_model: "tiny.en"
  
  # Compute device: "cpu" or "cuda" (for GPU acceleration)
  # Use "cuda" if you have an NVIDIA GPU with CUDA support
  device: "cuda"
  
  # Compute type: "int8" (CPU, fastest), "float16" (GPU, recommended), "float32" (highest quality)
  # Use float16 for GPU, int8 for CPU
  compute_type: "float16"
  
  # Beam size for main model (higher = more accurate, slower)
  beam_size: 5
  
  # Beam size for realtime model (lower = faster)
  beam_size_realtime: 3
  
  # Language code (e.g., "en", "es", "fr", "de", "zh")
  # Set to null for auto-detection
  language: "en"
  
  # Enable realtime transcription preview
  # Shows words as you speak, then refines with final transcription
  enable_realtime_transcription: true
  
  # Interval between realtime updates (seconds)
  # Lower = more frequent updates, higher CPU usage
  realtime_processing_pause: 0.02
  
  # Type realtime preview to keyboard (false = only show in stdout)
  # When true, preview is typed and corrected with backspaces (can be distracting)
  # When false, only final transcription is typed to keyboard
  type_realtime_preview: false

vad:
  # Voice Activity Detection settings
  
  # WebRTC sensitivity (0-3, higher = less sensitive to noise)
  # Use 3 for noisy environments, 1 for quiet environments
  webrtc_sensitivity: 3
  
  # Silero sensitivity (0.0-1.0, lower = more sensitive)
  # Lower values catch quieter speech but may have false positives
  silero_sensitivity: 0.05
  
  # Use ONNX for faster Silero inference on CPU
  silero_use_onnx: true

shortcuts:
  # Toggle listening on/off
  # Hotkey combination to start/stop listening
  # Examples: "ctrl+shift+space", "ctrl+alt+l", "alt+space"
  toggle_listening: "ctrl+shift+space"

keyboard:
  # Delay between each keystroke in milliseconds
  # Prevents skipping keys in some terminal inputs
  # Increase if keys are being dropped
  typing_delay_ms: 10

word_mappings:
  # Map spoken words to keyboard output
  # When you say these words, they'll be replaced with the specified text
  # All mappings are case-insensitive
  
  # Line breaks
  new line: "\n"
  
  # Formatting
  insert bullet: "- "
  completion: "\t"
  
  # Punctuation (say these to insert punctuation)
  end of sentence: "."
  dot: "."
  comma: ","
  question mark: "?"
  exclamation point: "!"
  colon: ":"
  semicolon: ";"
  
  # Hotkeys (execute keyboard shortcuts)
  now undo: "ctrl+z"
  now redo: "ctrl+y"
  now copy: "ctrl+c"
  now paste: "ctrl+v"
  now cut: "ctrl+x"
  now save: "ctrl+s"
  
  # Add your own custom mappings below:
  # new paragraph: "\n\n"
  # select all: "ctrl+a"
  # find: "ctrl+f"
  # my email: "your.email@example.com"

notifications:
  # Enable/disable system notifications
  enabled: true
  
  # Show notification when app starts
  show_on_start: true
  
  # Show notification when toggling listening on/off
  # Note: When sounds are enabled, sounds play instead of toggle notifications
  show_on_toggle: true

sounds:
  # Enable/disable sound playback
  enabled: true
  
  # Sound file to play when listening starts (CapsLock ON)
  on_listening_start: "sfx/on.wav"
  
  # Sound file to play when listening stops (CapsLock OFF)
  on_listening_stop: "sfx/off.wav"

system_tray:
  # Enable/disable system tray icon
  enabled: true

logging:
  # Add timestamps to console output for performance monitoring
  # Format: "1.234s Message"
  timestamps: true
  
  # Enable verbose logging
  verbose: false
